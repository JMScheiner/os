
#ifndef REG_X239SB19
#define REG_X239SB19

typedef struct PUSHA
{
   long edi;         
   long esi;
   long ebp;
   long original_esp;
   long ebx;
   long edx;
   long ecx;
   long eax;
} pusha_t;

/** 
* @brief  Image of the register state on entry to an interrupt handler
*  when an error is generated. 
*/
typedef struct REGSTATE_ERROR
{ 
   /* Generated by pusha: */
   pusha_t pusha;

   /* Generated by INT: */
   long ecode;
   long eip;
   long cs;
   long eflags;
   long esp;
   long ss;
} regstate_error_t;

/** 
* @brief  Image of the register state on entry to an interrupt handler
*  when an error is not generated. 
*/
typedef struct REGSTATE
{ 
   /* Generated by pusha: */
   pusha_t pusha;
   
   /* Generated by INT */
   long eip;
   long cs;
   long eflags;
   long esp;
   long ss;
} regstate_t;

/** 
* @brief The argument for the given syscall - either the value itself, 
*  or the address of a "packet" containing the arguments in user space.
* 
* @param regstate The register state on entry to a system call.
* 
* @return The argument.
*/
#define SYSCALL_ARG(regstate) \
   ((regstate).pusha.esi)

/**
 * @brief Return with the given value. Useful for trap handlers to set the eax
 * return value.
 *
 *  Requires the argument to the handler be declared "reg" 
 *
 * @param ret The value to return.
 */
#define RETURN(ret) \
   do { \
      reg.pusha.eax = (ret); \
      return; \
   } while (0)

#endif /* end of include guard: REG_X239SB19 */


